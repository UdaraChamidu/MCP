import google.generativeai as genai

class Message:
    def __init__(self, content):
        self.content = content

class Gemini:
    def __init__(self, model: str, api_key: str):
        genai.configure(api_key=api_key)
        self.model_name = model
        self.client = genai.GenerativeModel(model)

    def chat(
        self,
        messages,
        system=None,
        temperature=1.0,
        stop_sequences=None,
        tools=None,
        thinking=False,
        thinking_budget=1024,
    ):
        conversation = ""
        if system:
            conversation += f"System: {system}\n"
        if messages:
            for msg in messages:
                role = msg.get("role", "user").capitalize()
                content = msg.get("content", "")
                conversation += f"{role}: {content}\n"

        if tools:
            conversation += f"\n[Tools available: {tools}]"

        response = self.client.generate_content(conversation)
        print("DEBUG raw response:", response)

        # Check for unknown finish_reason and warn
        try:
            finish_reason = response.result.candidates[0].finish_reason
            if finish_reason not in {0, 1, 2, 3, 4, 5}:  # Common known finish reasons
                print(f"Warning: Unrecognized finish_reason: {finish_reason}")
        except Exception:
            pass

        # Extract text safely
        text_content = ""
        try:
            # Try quick accessor
            text_content = response.text
        except Exception:
            # Fallback: concatenate parts from candidates if available
            candidates = getattr(response.result, "candidates", [])
            if candidates:
                parts = []
                for candidate in candidates:
                    candidate_parts = getattr(candidate, "parts", [])
                    for part in candidate_parts:
                        part_text = getattr(part, "text", None)
                        if part_text:
                            parts.append(part_text)
                text_content = "\n".join(parts)

        if not text_content:
            text_content = "Sorry, no content was generated by the model."

        return Message(text_content)
